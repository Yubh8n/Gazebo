// Generated by gencpp from file mavlink_lora/mavlink_lora_altitude.msg
// DO NOT EDIT!


#ifndef MAVLINK_LORA_MESSAGE_MAVLINK_LORA_ALTITUDE_H
#define MAVLINK_LORA_MESSAGE_MAVLINK_LORA_ALTITUDE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace mavlink_lora
{
template <class ContainerAllocator>
struct mavlink_lora_altitude_
{
  typedef mavlink_lora_altitude_<ContainerAllocator> Type;

  mavlink_lora_altitude_()
    : time_usec(0)
    , altitude_monotonic(0.0)
    , altitude_amsl(0.0)
    , altitude_local(0.0)
    , altitude_relative(0.0)
    , altitude_terrain(0.0)
    , bottom_clearance(0.0)  {
    }
  mavlink_lora_altitude_(const ContainerAllocator& _alloc)
    : time_usec(0)
    , altitude_monotonic(0.0)
    , altitude_amsl(0.0)
    , altitude_local(0.0)
    , altitude_relative(0.0)
    , altitude_terrain(0.0)
    , bottom_clearance(0.0)  {
  (void)_alloc;
    }



   typedef uint64_t _time_usec_type;
  _time_usec_type time_usec;

   typedef double _altitude_monotonic_type;
  _altitude_monotonic_type altitude_monotonic;

   typedef double _altitude_amsl_type;
  _altitude_amsl_type altitude_amsl;

   typedef double _altitude_local_type;
  _altitude_local_type altitude_local;

   typedef double _altitude_relative_type;
  _altitude_relative_type altitude_relative;

   typedef double _altitude_terrain_type;
  _altitude_terrain_type altitude_terrain;

   typedef double _bottom_clearance_type;
  _bottom_clearance_type bottom_clearance;





  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> const> ConstPtr;

}; // struct mavlink_lora_altitude_

typedef ::mavlink_lora::mavlink_lora_altitude_<std::allocator<void> > mavlink_lora_altitude;

typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_altitude > mavlink_lora_altitudePtr;
typedef boost::shared_ptr< ::mavlink_lora::mavlink_lora_altitude const> mavlink_lora_altitudeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace mavlink_lora

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'mavlink_lora': ['/home/chris/school/ownProjects/gazebo_with_thor/Gazebo/catkin_ws/src/mavlink_lora/msg'], 'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d974842e562ac493e92f77dd7721717e";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd974842e562ac493ULL;
  static const uint64_t static_value2 = 0xe92f77dd7721717eULL;
};

template<class ContainerAllocator>
struct DataType< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "mavlink_lora/mavlink_lora_altitude";
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint64 time_usec\n"
"float64 altitude_monotonic\n"
"float64 altitude_amsl\n"
"float64 altitude_local\n"
"float64 altitude_relative\n"
"float64 altitude_terrain\n"
"float64 bottom_clearance\n"
;
  }

  static const char* value(const ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.time_usec);
      stream.next(m.altitude_monotonic);
      stream.next(m.altitude_amsl);
      stream.next(m.altitude_local);
      stream.next(m.altitude_relative);
      stream.next(m.altitude_terrain);
      stream.next(m.bottom_clearance);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mavlink_lora_altitude_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::mavlink_lora::mavlink_lora_altitude_<ContainerAllocator>& v)
  {
    s << indent << "time_usec: ";
    Printer<uint64_t>::stream(s, indent + "  ", v.time_usec);
    s << indent << "altitude_monotonic: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_monotonic);
    s << indent << "altitude_amsl: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_amsl);
    s << indent << "altitude_local: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_local);
    s << indent << "altitude_relative: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_relative);
    s << indent << "altitude_terrain: ";
    Printer<double>::stream(s, indent + "  ", v.altitude_terrain);
    s << indent << "bottom_clearance: ";
    Printer<double>::stream(s, indent + "  ", v.bottom_clearance);
  }
};

} // namespace message_operations
} // namespace ros

#endif // MAVLINK_LORA_MESSAGE_MAVLINK_LORA_ALTITUDE_H
